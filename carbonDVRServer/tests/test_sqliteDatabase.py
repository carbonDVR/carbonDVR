from datetime import datetime, timedelta, timezone
import os
import unittest

from sqliteDatabase import SqliteDatabase, toEpisodeNumber


class TestSqliteDatabase(unittest.TestCase):

    def test_toEpisodeNumber(self):
        self.assertEqual(14, toEpisodeNumber('14_3'))

    def test_schemaAutomaticallyInitialized(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.getSchemaVersion())

    def test_schemaInitializationIsIdempotent(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.getSchemaVersion())
        db.initializeSchema()
        self.assertEqual(1, db.getSchemaVersion())

    def test_getTuners(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertTuner('foo','192.168.1.1',1))
        self.assertEqual(1, db.insertTuner('baz','10.10.10.1',0))
        tuners = sorted(db.getTuners(), key=lambda tuner:tuner.deviceID)
        self.assertEqual(2, len(tuners))
        self.assertEqual('baz', tuners[0].deviceID)
        self.assertEqual('10.10.10.1', tuners[0].ipAddress)
        self.assertEqual(0, tuners[0].tunerID)
        self.assertEqual('foo', tuners[1].deviceID)
        self.assertEqual('192.168.1.1', tuners[1].ipAddress)
        self.assertEqual(1, tuners[1].tunerID)
        
    def test_getChannels(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertChannel(4,1,5,1))
        self.assertEqual(1, db.insertChannel(19,3,18,2))
        self.assertEqual(1, db.insertChannel(5,2,37,3))
        channels = sorted(db.getChannels(), key=lambda channel:channel.channelMajor)
        self.assertEqual(3, len(channels))
        self.assertEqual(4, channels[0].channelMajor)
        self.assertEqual(1, channels[0].channelMinor)
        self.assertEqual(5, channels[0].channelActual)
        self.assertEqual(1, channels[0].program)
        self.assertEqual(5, channels[1].channelMajor)
        self.assertEqual(2, channels[1].channelMinor)
        self.assertEqual(37, channels[1].channelActual)
        self.assertEqual(3, channels[1].program)
        self.assertEqual(19, channels[2].channelMajor)
        self.assertEqual(3, channels[2].channelMinor)
        self.assertEqual(18, channels[2].channelActual)
        self.assertEqual(2, channels[2].program)

    def test_getUniqueID(self):
        db = SqliteDatabase(":memory:")
        uniqueID1 = db.getUniqueID();
        uniqueID2 = db.getUniqueID();
        uniqueID3 = db.getUniqueID();
        uniqueID4 = db.getUniqueID();
        self.assertEqual(uniqueID1+1, uniqueID2)
        self.assertEqual(uniqueID1+2, uniqueID3)
        self.assertEqual(uniqueID1+3, uniqueID4)

    def test_getPendingRecordings(self):
        db = SqliteDatabase(":memory:")
        db.insertChannel(channelMajor=1, channelMinor=1, channelActual=14, program=1)
        db.insertShow(showID="show1", showType="comedy", name="Show #1")
        db.insertSubscription(showID="show1", priority=1)
        db.insertEpisode(showID="show1", episodeID="episode1", title="Show 1, Episode 1", description="")
        db.insertEpisode(showID="show1", episodeID="episode2", title="Show 1, Episode 2", description="")

        # scheduled recordings should be returned
        scheduleTime1 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(hours=1)
        scheduleDuration1 = timedelta(minutes=30)
        scheduleTime2 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(hours=2)
        scheduleDuration2 = timedelta(minutes=30)
        db.insertSchedule(1, 4, scheduleTime1, scheduleDuration1, "show1", "episode1", "N")
        db.insertSchedule(38, 2, scheduleTime2, scheduleDuration2, "show1", "episode2", "R")
        pendingRecordings = db.getPendingRecordings()
        self.assertEqual(2, len(pendingRecordings))
        self.assertEqual(1, pendingRecordings[0].channelMajor)
        self.assertEqual(4, pendingRecordings[0].channelMinor)
        self.assertEqual(scheduleTime1, pendingRecordings[0].startTime)
        self.assertEqual(scheduleDuration1, pendingRecordings[0].duration)
        self.assertEqual("show1", pendingRecordings[0].showID)
        self.assertEqual("episode1", pendingRecordings[0].episodeID)
        self.assertEqual("N", pendingRecordings[0].rerunCode)
        self.assertEqual(38, pendingRecordings[1].channelMajor)
        self.assertEqual(2, pendingRecordings[1].channelMinor)
        self.assertEqual(scheduleTime2, pendingRecordings[1].startTime)
        self.assertEqual(scheduleDuration2, pendingRecordings[0].duration)
        self.assertEqual("show1", pendingRecordings[1].showID)
        self.assertEqual("episode2", pendingRecordings[1].episodeID)
        self.assertEqual("R", pendingRecordings[1].rerunCode)

        # if an episode is scheduled multiple times, only return the earliest
        db.insertSchedule(1, 1, scheduleTime1 - timedelta(minutes=20), scheduleDuration1, "show1", "episode1", "N")
        pendingRecordings = db.getPendingRecordings()
        self.assertEqual(2, len(pendingRecordings))
        self.assertEqual("show1", pendingRecordings[0].showID)
        self.assertEqual("episode1", pendingRecordings[0].episodeID)
        self.assertEqual(scheduleTime1 - timedelta(minutes=20), pendingRecordings[0].startTime)
        self.assertEqual("show1", pendingRecordings[1].showID)
        self.assertEqual("episode2", pendingRecordings[1].episodeID)
        self.assertEqual(scheduleTime2, pendingRecordings[1].startTime)

        # a video that already has a raw recording should not be recorded again
        db.insertRecording(1234, "show1", "episode1", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'N')
        db.insertRawFileLocation(1234, "foo.mp4")
        pendingRecordings = db.getPendingRecordings()
        self.assertEqual(1, len(pendingRecordings))
        self.assertEqual("show1", pendingRecordings[0].showID)
        self.assertEqual("episode2", pendingRecordings[0].episodeID)
        self.assertEqual(scheduleTime2, pendingRecordings[0].startTime)

        # a video that already has a transcoded recording should not be recorded again
        db.insertRecording(1235, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'N')
        db.insertTranscodedFileLocation(1235, 1, "foo.mp4", 0)
        pendingRecordings = db.getPendingRecordings()
        self.assertEqual(0, len(pendingRecordings))

        # only subscribed shows should be returned
        db.insertShow(showID="show2", showType="comedy", name="Show #2")
        db.insertEpisode(showID="show2", episodeID="episode1", title="Show 2, Episode 1", description="")
        db.insertSchedule(1, 1, scheduleTime1, scheduleDuration1, "show2", "episode1", "N")
        self.assertEqual(0, len(db.getPendingRecordings()))
        db.insertSubscription(showID="show2", priority=1)
        self.assertEqual(1, len(db.getPendingRecordings()))
        db.deleteSubscription(showID="show2")
        self.assertEqual(0, len(db.getPendingRecordings()))

    def test_getRecordingsToBif(self):
        db = SqliteDatabase(":memory:")
        db.insertTranscodedFileLocation(1167, 0, "file1.mp4", db.TRANSCODE_SUCCESSFUL)
        db.insertTranscodedFileLocation(1235, 0, "file2.mp4", db.TRANSCODE_SUCCESSFUL)
        db.insertTranscodedFileLocation(1311, 0, "file3.mp4", db.TRANSCODE_FAILED)
        db.insertTranscodedFileLocation(1492, 0, "file4.mp4", db.TRANSCODE_SUCCESSFUL)
        db.insertBifFileLocation(1167, 1, "file1.bif")
        filesToBif = sorted(db.getRecordingsToBif(), key=lambda x:x.recordingID)
        self.assertEqual(2, len(filesToBif))
        self.assertEqual(1235, filesToBif[0].recordingID)
        self.assertEqual("file2.mp4", filesToBif[0].filename)
        self.assertEqual(1492, filesToBif[1].recordingID)
        self.assertEqual("file4.mp4", filesToBif[1].filename)

    def test_getUnreferencedRawVideoRecords(self):
        db = SqliteDatabase(":memory:")
        db.insertRecording(1234, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'N')
        db.insertRawFileLocation(1234, "1234.mp4")
        db.insertRawFileLocation(1235, "1235.mp4")
        records = db.getUnreferencedRawVideoRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)
        self.assertEqual("1235.mp4", records[0].filename)

    def test_deleteRawVideoRecord(self):
        db = SqliteDatabase(":memory:")
        db.insertRawFileLocation(1234, "1234.mp4")
        db.insertRawFileLocation(1235, "1235.mp4")
        records = sorted(db.getUnreferencedRawVideoRecords(), key=lambda x:x.recordingID)
        self.assertEqual(2, len(records))
        self.assertEqual(1234, records[0].recordingID)
        self.assertEqual(1235, records[1].recordingID)
        db.deleteRawVideoRecord(1234)
        records = db.getUnreferencedRawVideoRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)

    def test_getUnreferencedTranscodedVideoRecords(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRecording(1234, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'N'))
        self.assertEqual(1, db.insertTranscodedFileLocation(1234, 0, "1234.mp4", db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertTranscodedFileLocation(1235, 0, "1235.mp4", db.TRANSCODE_FAILED))
        records = db.getUnreferencedTranscodedVideoRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)
        self.assertEqual("1235.mp4", records[0].filename)

    def test_deleteTranscodedVideoRecord(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertTranscodedFileLocation(1234, 0, "1234.mp4", db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertTranscodedFileLocation(1235, 0, "1235.mp4", db.TRANSCODE_FAILED))
        records = db.getUnreferencedTranscodedVideoRecords()
        self.assertEqual(2, len(records))
        self.assertEqual(1234, records[0].recordingID)
        self.assertEqual(1235, records[1].recordingID)
        self.assertEqual(1, db.deleteTranscodedVideoRecord(1234))
        records = db.getUnreferencedTranscodedVideoRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)

    def test_getUnreferencedBifRecords(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRecording(1234, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'N'))
        self.assertEqual(1, db.insertBifFileLocation(1234, 0, "1234.bif"))
        self.assertEqual(1, db.insertBifFileLocation(1235, 0, "1235.bif"))
        records = db.getUnreferencedBifRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)
        self.assertEqual("1235.bif", records[0].filename)

    def test_deleteBifRecord(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertBifFileLocation(1234, 0, "1234.bif"))
        self.assertEqual(1, db.insertBifFileLocation(1235, 0, "1235.bif"))
        records = db.getUnreferencedBifRecords()
        self.assertEqual(2, len(records))
        self.assertEqual(1234, records[0].recordingID)
        self.assertEqual(1235, records[1].recordingID)
        self.assertEqual(1, db.deleteBifRecord(1234))
        records = db.getUnreferencedBifRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)

    def test_getUnneededRawVideoRecords(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRawFileLocation(1234, "1234.mpeg"))
        self.assertEqual(1, db.insertRawFileLocation(1235, "1235.mpeg"))
        self.assertEqual(1, db.insertRawFileLocation(1236, "1236.mpeg"))
        self.assertEqual(1, db.insertTranscodedFileLocation(1234, 0, "1234.mp4", db.TRANSCODE_FAILED))
        self.assertEqual(1, db.insertTranscodedFileLocation(1235, 0, "1235.mp4", db.TRANSCODE_SUCCESSFUL))
        records = db.getUnneededRawVideoRecords()
        self.assertEqual(1, len(records))
        self.assertEqual(1235, records[0].recordingID)
        self.assertEqual("1235.mpeg", records[0].filename)
        db.getUnneededRawVideoRecords()

    def test_selectRecordingsToTranscode(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRawFileLocation(1234, "1234.mpeg2"))
        self.assertEqual(1, db.insertRawFileLocation(1235, "1235.mpeg2"))
        self.assertEqual(1, db.insertRawFileLocation(1236, "1236.mpeg2"))
        self.assertEqual(1, db.insertRawFileLocation(1237, "1237.mpeg2"))
        self.assertEqual(1, db.insertTranscodedFileLocation(1235, 0, "1235.mp4", db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertTranscodedFileLocation(1236, 0, "1236.mp4", db.TRANSCODE_FAILED))
        recordingsToTranscode = sorted(db.selectRecordingsToTranscode(), key=lambda x:x.recordingID)
        self.assertEqual(2, len(recordingsToTranscode))
        self.assertEqual(1234, recordingsToTranscode[0].recordingID)
        self.assertEqual("1234.mpeg2", recordingsToTranscode[0].filename)
        self.assertEqual(1237, recordingsToTranscode[1].recordingID)
        self.assertEqual("1237.mpeg2", recordingsToTranscode[1].filename)

    def test_getDuration(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRecording(1234, "show1", "episode1", datetime.utcnow(), timedelta(minutes=30), 'N'))
        self.assertEqual(1, db.insertRecording(1235, "show1", "episode2", datetime.utcnow(), timedelta(minutes=59), 'N'))
        self.assertEqual(timedelta(minutes=30), db.getDuration(1234))
        self.assertEqual(timedelta(minutes=59), db.getDuration(1235))
        self.assertEqual(timedelta(seconds=0), db.getDuration(1236))

    def test_getShowsWithRecordings(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, len(db.getShowsWithRecordings(['A', 'B'])))
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertShow(showID='show2', showType='comedy', name='ShowName2'))  # no recording
        self.assertEqual(1, db.insertShow(showID='show3', showType='comedy', name='ShowName3'))  # no bif
        self.assertEqual(1, db.insertShow(showID='show4', showType='comedy', name='ShowName4'))  # wrong categoryCode
        self.assertEqual(1, db.insertShow(showID='show5', showType='comedy', name='ShowName5'))
        recordDate = datetime(2019,11,15,19,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID='show1', episodeID='1', dateRecorded=recordDate, duration=timedelta(minutes=30), categoryCode='A'))
        self.assertEqual(1, db.insertRecording(recordingID=1003, showID='show3', episodeID='1', dateRecorded=recordDate, duration=timedelta(minutes=30), categoryCode='A'))
        self.assertEqual(1, db.insertRecording(recordingID=1004, showID='show4', episodeID='1', dateRecorded=recordDate, duration=timedelta(minutes=30), categoryCode='C'))
        self.assertEqual(1, db.insertRecording(recordingID=1005, showID='show5', episodeID='1', dateRecorded=recordDate, duration=timedelta(minutes=30), categoryCode='B'))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1001, locationID=1, filename="1001.bif"))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1004, locationID=1, filename="1004.bif"))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1005, locationID=1, filename="1005.bif"))
        showsWithRecordings = db.getShowsWithRecordings(['A', 'B'])
        self.assertEqual(2, len(showsWithRecordings))
        self.assertEqual('show1', showsWithRecordings[0]['showID'])
        self.assertEqual('ShowName1', showsWithRecordings[0]['name'])
        self.assertIsNone(showsWithRecordings[0]['imageURL'])
        self.assertEqual('show5', showsWithRecordings[1]['showID'])
        self.assertEqual('ShowName5', showsWithRecordings[1]['name'])
        self.assertIsNone(showsWithRecordings[1]['imageURL'])

    def test_getEpisodeData(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, len(db.getEpisodeData('show1', 'A')))
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='The show name'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='7', title='Title7', description='Description7'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='14_3', title='Title14', description='Description14'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='5', title='Title5', description='Description5'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='3', title='Title3', description='Description3'))
        recordDate1 = datetime(2019,11,15,19,00,00,00,timezone.utc)
        recordDate2 = datetime(2019,11,15,20,00,00,00,timezone.utc)
        recordDate3 = datetime(2019,11,16,18,00,00,00,timezone.utc)
        recordDate4 = datetime(2019,11,16,23,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertRecording(recordingID=1567, showID='show1', episodeID='7', dateRecorded=recordDate3, duration=timedelta(minutes=30), categoryCode='C'))
        self.assertEqual(1, db.insertRecording(recordingID=1839, showID='show1', episodeID='14_3', dateRecorded=recordDate4, duration=timedelta(minutes=30), categoryCode='A'))
        self.assertEqual(1, db.insertRecording(recordingID=1511, showID='show1', episodeID='5', dateRecorded=recordDate2, duration=timedelta(minutes=30), categoryCode='A'))
        self.assertEqual(1, db.insertRecording(recordingID=1492, showID='show1', episodeID='3', dateRecorded=recordDate1, duration=timedelta(minutes=30), categoryCode='B'))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1492, locationID=1, filename="1492.mp4", state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1492, locationID=1, filename="1492.bif"))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1511, locationID=1, filename="1511.mp4", state=db.TRANSCODE_FAILED))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1511, locationID=1, filename="1511.bif"))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1567, locationID=2, filename="1567.mp4", state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1567, locationID=2, filename="1567.bif"))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1839, locationID=1, filename="1839.mp4", state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertBifFileLocation(recordingID=1839, locationID=1, filename="1839.bif"))
        episodeData = db.getEpisodeData('show1', ['A', 'B'])
        self.assertEqual(2, len(episodeData))
        self.assertEqual(1492, episodeData[0]['recordingID'])
        self.assertEqual('show1', episodeData[0]['showID'])
        self.assertEqual('3', episodeData[0]['episodeID'])
        self.assertEqual('Title3', episodeData[0]['episodeTitle'])
        self.assertEqual('Description3', episodeData[0]['episodeDescription'])
        self.assertIsNone(episodeData[0]['imageURL'])
        self.assertIsNone(episodeData[0]['showImageURL'])
        self.assertEqual(3, episodeData[0]['episodeNumber'])
        self.assertEqual(1839, episodeData[1]['recordingID'])
        self.assertEqual('show1', episodeData[1]['showID'])
        self.assertEqual('14_3', episodeData[1]['episodeID'])
        self.assertEqual('Title14', episodeData[1]['episodeTitle'])
        self.assertEqual('Description14', episodeData[1]['episodeDescription'])
        self.assertIsNone(episodeData[1]['imageURL'])
        self.assertIsNone(episodeData[1]['showImageURL'])
        self.assertEqual(14, episodeData[1]['episodeNumber'])

    def test_getRecordingData(self):
        db = SqliteDatabase(":memory:")
        self.assertIsNone(db.getRecordingData(1492))
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='The show name'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='14_3', title='The episode title', description='a series of improbable events occurs'))
        dateRecorded = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc)
        self.assertEqual(1, db.insertRecording(1492, 'show1', '14_3', dateRecorded, timedelta(minutes=30), 'A'))
        recordingData = db.getRecordingData(1492)
        self.assertIsNotNone(recordingData)
        self.assertEqual(1492, recordingData['recordingID'])
        self.assertEqual('The show name', recordingData['showName'])
        self.assertIsNone(recordingData['imageURL'])
        self.assertEqual('The episode title', recordingData['episodeTitle'])
        self.assertEqual('a series of improbable events occurs', recordingData['episodeDescription'])
        self.assertEqual(dateRecorded, recordingData['dateRecorded'])
        self.assertEqual(timedelta(minutes=30), recordingData['duration'])
        self.assertEqual(14, recordingData['episodeNumber'])

    def test_getTranscodedVideoLocationID(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, db.getTranscodedVideoLocationID(1492))
        self.assertEqual(1, db.insertTranscodedFileLocation(1492, 432, "1492.mp4", db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, db.insertTranscodedFileLocation(1567, 765, "1492.mp4", db.TRANSCODE_FAILED))
        self.assertEqual(432, db.getTranscodedVideoLocationID(1492))
        self.assertEqual(765, db.getTranscodedVideoLocationID(1567))
        self.assertEqual(1, db.deleteTranscodedVideoRecord(1492))
        self.assertEqual(1, db.deleteTranscodedVideoRecord(1567))
        self.assertEqual(0, db.getBifLocationID(1492))
        self.assertEqual(0, db.getBifLocationID(1567))

    def test_getBifLocationID(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, db.getBifLocationID(1492))
        self.assertEqual(1, db.insertBifFileLocation(1492, 123, "1492.bif"))
        self.assertEqual(123, db.getBifLocationID(1492))
        self.assertEqual(1, db.deleteBifRecord(1492))
        self.assertEqual(0, db.getBifLocationID(1492))

    def test_deleteRecording(self):
        db = SqliteDatabase(":memory:")
        db.insertRecording(1492, "show1", "episode1", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'A')
        db.insertRecording(1567, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'B')
        self.assertEqual('A', db.getCategoryCode(1492))
        self.assertEqual('B', db.getCategoryCode(1567))
        self.assertEqual(1, db.deleteRecording(1567))
        self.assertEqual('A', db.getCategoryCode(1492))
        self.assertEqual('', db.getCategoryCode(1567))
        self.assertEqual(1, db.deleteRecording(1492))
        self.assertEqual('', db.getCategoryCode(1492))
        self.assertEqual('', db.getCategoryCode(1567))

    def test_setPlaybackPosition(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.setPlaybackPosition(1492, 206))
        self.assertEqual({'playbackPosition':206}, db.getPlaybackPosition(1492))
        self.assertEqual(1, db.setPlaybackPosition(1567, 821))
        self.assertEqual({'playbackPosition':821}, db.getPlaybackPosition(1567))
        self.assertEqual(1, db.setPlaybackPosition(1492, 473))
        self.assertEqual({'playbackPosition':473}, db.getPlaybackPosition(1492))
        self.assertEqual(1, db.setPlaybackPosition(1567, 214))
        self.assertEqual({'playbackPosition':214}, db.getPlaybackPosition(1567))

    def test_setCategoryCode(self):
        db = SqliteDatabase(":memory:")
        db.insertRecording(1492, "show1", "episode1", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'A')
        db.insertRecording(1567, "show1", "episode2", datetime.utcnow() - timedelta(weeks=1), timedelta(minutes=30), 'B')
        self.assertEqual('A', db.getCategoryCode(1492))
        self.assertEqual('B', db.getCategoryCode(1567))
        self.assertEqual(1, db.setCategoryCode(1492, 'C'))
        self.assertEqual(1, db.setCategoryCode(1567, 'D'))
        self.assertEqual('C', db.getCategoryCode(1492))
        self.assertEqual('D', db.getCategoryCode(1567))

    def test_getRemainingListingTime(self):
        db = SqliteDatabase(":memory:")
        scheduleTime1 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(days=1,minutes=1)
        scheduleTime2 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(days=7,minutes=1)
        scheduleTime3 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(days=3,minutes=1)
        db.insertSchedule(1, 4, scheduleTime1, timedelta(minutes=60), "show1", "episode1", "N")
        db.insertSchedule(38, 2, scheduleTime2, timedelta(minutes=60), "show1", "episode2", "R")
        db.insertSchedule(18, 3, scheduleTime3, timedelta(minutes=60), "show1", "episode2", "R")
        self.assertEqual(7, db.getRemainingListingTime().days)

    def test_getAllRecordings(self):
        db = SqliteDatabase(":memory:")
        time1 = datetime(2019,11,15,19,00,00,00,timezone.utc)
        time2 = datetime(2019,11,15,20,00,00,00,timezone.utc)
        time3 = datetime(2019,11,16,18,00,00,00,timezone.utc)
        time4 = datetime(2019,11,16,23,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertShow(showID='show2', showType='comedy', name='ShowName2'))
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="1_1", title="Show 1, Episode 1", description="")) # recording w/ raw file
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="2_1", title="Show 1, Episode 2", description="")) # recording w/ transcoded file
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="3_1", title="Show 1, Episode 3", description="")) # recording w/o any file
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="4_1", title="Show 1, Episode 4", description="")) # no recording
        self.assertEqual(1, db.insertEpisode(showID="show2", episodeID="1_1", title="Show 2, Episode 1", description="")) # recording w/ raw file
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID="show1", episodeID="1_1", dateRecorded=time1, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1002, showID="show1", episodeID="2_1", dateRecorded=time2, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1003, showID="show1", episodeID="3_1", dateRecorded=time3, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1005, showID="show2", episodeID="1_1", dateRecorded=time4, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRawFileLocation(recordingID=1001, filename="1001.mpeg2ts"))
        self.assertEqual(1, db.insertRawFileLocation(recordingID=1005, filename="1005.mpeg2ts"))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1002, locationID=1, filename="1002.mp4", state=db.TRANSCODE_SUCCESSFUL))
        recordings = db.getAllRecordings()
        self.assertEqual(3, len(recordings))
        self.assertEqual(1005, recordings[0].recordingID)
        self.assertEqual('ShowName2', recordings[0].show)
        self.assertEqual('Show 2, Episode 1', recordings[0].episode)
        self.assertEqual(1, recordings[0].episodeNumber)
        self.assertEqual(time4, recordings[0].dateRecorded)
        self.assertEqual(timedelta(minutes=30), recordings[0].duration)
        self.assertEqual(1002, recordings[1].recordingID)
        self.assertEqual('ShowName1', recordings[1].show)
        self.assertEqual('Show 1, Episode 2', recordings[1].episode)
        self.assertEqual(2, recordings[1].episodeNumber)
        self.assertEqual(time2, recordings[1].dateRecorded)
        self.assertEqual(timedelta(minutes=30), recordings[1].duration)
        self.assertEqual(1001, recordings[2].recordingID)
        self.assertEqual('ShowName1', recordings[2].show)
        self.assertEqual('Show 1, Episode 1', recordings[2].episode)
        self.assertEqual(1, recordings[2].episodeNumber)
        self.assertEqual(time1, recordings[2].dateRecorded)
        self.assertEqual(timedelta(minutes=30), recordings[2].duration)

    def test_getRecentRecordings(self):
        db = SqliteDatabase(":memory:")
        now = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc)
        time1 = now - timedelta(hours=1)
        time2 = now - timedelta(hours=47)
        time3 = now - timedelta(hours=48) # >=48 hours is not recent
        time4 = now - timedelta(hours=72) # >=48 hours is not recent
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertShow(showID='show2', showType='comedy', name='ShowName2'))
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="4_1", title="Show 1, Episode 4", description="")) # recent recording
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="3_1", title="Show 1, Episode 3", description="")) # no recording
        self.assertEqual(1, db.insertEpisode(showID="show2", episodeID="3_1", title="Show 2, Episode 3", description="")) # recent recording
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="2_1", title="Show 1, Episode 2", description="")) # non-recent recording
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="1_1", title="Show 1, Episode 1", description="")) # non-recent recording
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID="show1", episodeID="4_1", dateRecorded=time1, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1003, showID="show2", episodeID="3_1", dateRecorded=time2, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1004, showID="show1", episodeID="2_1", dateRecorded=time3, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1005, showID="show1", episodeID="1_1", dateRecorded=time4, duration=timedelta(minutes=30), categoryCode='N'))
        recordings = db.getRecentRecordings()
        self.assertEqual(2, len(recordings))
        self.assertEqual(1001, recordings[0].recordingID)
        self.assertEqual('ShowName1', recordings[0].show)
        self.assertEqual('Show 1, Episode 4', recordings[0].episode)
        self.assertEqual(4, recordings[0].episodeNumber)
        self.assertEqual(time1, recordings[0].dateRecorded)
        self.assertEqual(timedelta(minutes=30), recordings[0].duration)
        self.assertEqual(1003, recordings[1].recordingID)
        self.assertEqual('ShowName2', recordings[1].show)
        self.assertEqual('Show 2, Episode 3', recordings[1].episode)
        self.assertEqual(3, recordings[1].episodeNumber)
        self.assertEqual(time2, recordings[1].dateRecorded)
        self.assertEqual(timedelta(minutes=30), recordings[1].duration)

    def test_getUpcomingRecordings(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertChannel(channelMajor=1, channelMinor=1, channelActual=14, program=1))
        self.assertEqual(1, db.insertShow(showID="show1", showType="comedy", name="ShowName1"))
        self.assertEqual(1, db.insertSubscription(showID="show1", priority=1))
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="1_1", title="Show 1, Episode 1", description=""))
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="2.1", title="Show 1, Episode 2", description=""))

        # scheduled recordings should be returned
        scheduleTime1 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(hours=1)
        scheduleDuration1 = timedelta(minutes=30)
        scheduleTime2 = datetime.utcnow().replace(microsecond=0, tzinfo=timezone.utc) + timedelta(hours=2)
        scheduleDuration2 = timedelta(minutes=30)
        self.assertEqual(1, db.insertSchedule(channelMajor=1, channelMinor=4, startTime=scheduleTime1, duration=scheduleDuration1,
            showID="show1", episodeID="1_1", rerunCode="N"))
        self.assertEqual(1, db.insertSchedule(channelMajor=38, channelMinor=2, startTime=scheduleTime2, duration=scheduleDuration2,
            showID="show1", episodeID="2.1", rerunCode="R"))
        upcomingRecordings = db.getUpcomingRecordings()
        self.assertEqual(2, len(upcomingRecordings))
        self.assertEqual(scheduleTime1, upcomingRecordings[0].startTime)
        self.assertEqual('1.4', upcomingRecordings[0].channel)
        self.assertEqual("ShowName1", upcomingRecordings[0].show)
        self.assertEqual(1, upcomingRecordings[0].episodeNumber)
        self.assertEqual("Show 1, Episode 1", upcomingRecordings[0].episode)
        self.assertEqual(scheduleTime2, upcomingRecordings[1].startTime)
        self.assertEqual('38.2', upcomingRecordings[1].channel)
        self.assertEqual("ShowName1", upcomingRecordings[1].show)
        self.assertEqual(2, upcomingRecordings[1].episodeNumber)
        self.assertEqual("Show 1, Episode 2", upcomingRecordings[1].episode)

        # if an episode is scheduled multiple times, only return the earliest
        self.assertEqual(1, db.insertSchedule(channelMajor=43, channelMinor=1, startTime=scheduleTime1 - timedelta(minutes=20), duration=scheduleDuration1,
            showID="show1", episodeID="1_1", rerunCode="N"))
        upcomingRecordings = db.getUpcomingRecordings()
        self.assertEqual(2, len(upcomingRecordings))
        self.assertEqual(scheduleTime1 - timedelta(minutes=20), upcomingRecordings[0].startTime)
        self.assertEqual('43.1', upcomingRecordings[0].channel)
        self.assertEqual("ShowName1", upcomingRecordings[0].show)
        self.assertEqual(1, upcomingRecordings[0].episodeNumber)
        self.assertEqual(scheduleTime2, upcomingRecordings[1].startTime)
        self.assertEqual('38.2', upcomingRecordings[1].channel)
        self.assertEqual("ShowName1", upcomingRecordings[1].show)
        self.assertEqual(2, upcomingRecordings[1].episodeNumber)

        # a video that already has a raw recording should not be recorded again
        self.assertEqual(1, db.insertRecording(recordingID=1234, showID="show1", episodeID="1_1", dateRecorded=datetime.utcnow() - timedelta(weeks=1),
            duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRawFileLocation(1234, "foo.mp4"))
        upcomingRecordings = db.getUpcomingRecordings()
        self.assertEqual(1, len(upcomingRecordings))
        self.assertEqual(scheduleTime2, upcomingRecordings[0].startTime)
        self.assertEqual('38.2', upcomingRecordings[0].channel)
        self.assertEqual("ShowName1", upcomingRecordings[0].show)
        self.assertEqual(2, upcomingRecordings[0].episodeNumber)

        # a video that already has a transcoded recording should not be recorded again
        self.assertEqual(1, db.insertRecording(recordingID=1235, showID="show1", episodeID="2.1", dateRecorded=datetime.utcnow() - timedelta(weeks=1),
            duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertTranscodedFileLocation(1235, 1, "foo.mp4", 0))
        upcomingRecordings = db.getUpcomingRecordings()
        self.assertEqual(0, len(upcomingRecordings))

        # only subscribed shows should be returned
        self.assertEqual(1, db.insertShow(showID="show2", showType="comedy", name="Show #2"))
        self.assertEqual(1, db.insertEpisode(showID="show2", episodeID="15", title="Show 2, Episode 1", description=""))
        self.assertEqual(1, db.insertSchedule(channelMajor=1, channelMinor=1, startTime=scheduleTime1, duration=scheduleDuration1, showID="show2", episodeID="15", rerunCode="N"))
        self.assertEqual(0, len(db.getUpcomingRecordings()))
        self.assertEqual(1, db.insertSubscription(showID="show2", priority=1))
        self.assertEqual(1, len(db.getUpcomingRecordings()))
        self.assertEqual(1, db.deleteSubscription(showID="show2"))
        self.assertEqual(0, len(db.getUpcomingRecordings()))

    def test_getShowList(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertShow(showID="show1", showType="comedy", name="ShowName1"))
        self.assertEqual(1, db.insertShow(showID="show2", showType="comedy", name="ShowName2"))
        self.assertEqual(1, db.insertShow(showID="show3", showType="comedy", name="ShowName3"))
        self.assertEqual(1, db.insertShow(showID="show4", showType="comedy", name="ShowName4"))
        self.assertEqual(1, db.insertShow(showID="show5", showType="comedy", name="ShowName5"))
        self.assertEqual(1, db.insertSubscription(showID="show2", priority=1))
        self.assertEqual(1, db.insertSubscription(showID="show4", priority=1))
        showList = db.getShowList()
        self.assertEqual(2, len(showList.subscribed))
        self.assertEqual('show2', showList.subscribed[0].showID)
        self.assertEqual('ShowName2', showList.subscribed[0].name)
        self.assertEqual('show4', showList.subscribed[1].showID)
        self.assertEqual('ShowName4', showList.subscribed[1].name)
        self.assertEqual(3, len(showList.unsubscribed))
        self.assertEqual('show1', showList.unsubscribed[0].showID)
        self.assertEqual('ShowName1', showList.unsubscribed[0].name)
        self.assertEqual('show3', showList.unsubscribed[1].showID)
        self.assertEqual('ShowName3', showList.unsubscribed[1].name)
        self.assertEqual('show5', showList.unsubscribed[2].showID)
        self.assertEqual('ShowName5', showList.unsubscribed[2].name)

    def test_getRecordingsWithoutFileRecords(self):
        db = SqliteDatabase(":memory:")
        time1 = datetime(2019,11,15,19,00,00,00,timezone.utc)
        time2 = datetime(2019,11,15,20,00,00,00,timezone.utc)
        time3 = datetime(2019,11,16,18,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertShow(showID="show1", showType="comedy", name="ShowName1"))
        self.assertEqual(1, db.insertShow(showID="show2", showType="comedy", name="ShowName2"))
        self.assertEqual(1, db.insertShow(showID="show3", showType="comedy", name="ShowName3"))
        self.assertEqual(1, db.insertEpisode(showID="show1", episodeID="1_1", title="S1E1", description=""))
        self.assertEqual(1, db.insertEpisode(showID="show2", episodeID="2_1", title="S2E2", description=""))
        self.assertEqual(1, db.insertEpisode(showID="show3", episodeID="3_1", title="S3E3", description=""))
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID="show1", episodeID="1_1", dateRecorded=time1, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1002, showID="show2", episodeID="2_1", dateRecorded=time2, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRecording(recordingID=1003, showID="show3", episodeID="3_1", dateRecorded=time3, duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertRawFileLocation(1001, "1001.mp4"))
        self.assertEqual(1, db.insertTranscodedFileLocation(1003, 1, "1003.mp4", 0))
        result = db.getRecordingsWithoutFileRecords()
        self.assertEqual(1, len(result))
        self.assertEqual(1002, result[0].recordingID)
        self.assertEqual('ShowName2', result[0].show)
        self.assertEqual('S2E2', result[0].episode)
        self.assertEqual(time2, result[0].dateRecorded)

    def test_getFileRecordsWithoutRecordings_all(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertRawFileLocation(1001, "1001.mpeg2ts"))
        self.assertEqual(1, db.insertTranscodedFileLocation(1001, 1, "1001.mp4", 0))
        self.assertEqual(1, db.insertBifFileLocation(1001, 1, "1001.bif"))
        fileRecords = db.getFileRecordsWithoutRecordings()
        self.assertEqual(1, len(fileRecords))
        self.assertEqual(1001, fileRecords[0].recordingID)
        self.assertEqual('1001.mpeg2ts', fileRecords[0].rawVideo)
        self.assertEqual('1001.mp4',fileRecords[0].transcodedVideo)
        self.assertEqual('1001.bif', fileRecords[0].bif)
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID="show1", episodeID="1", dateRecorded=datetime.utcnow(), duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getFileRecordsWithoutRecordings()))

    def test_getFileRecordsWithoutRecordings_individual(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, len(db.getFileRecordsWithoutRecordings()))
        # raw video
        self.assertEqual(1, db.insertRawFileLocation(1001, "1001.mpeg2ts"))
        fileRecords = db.getFileRecordsWithoutRecordings()
        self.assertEqual(1, len(fileRecords))
        self.assertEqual(1001, fileRecords[0].recordingID)
        self.assertEqual('1001.mpeg2ts', fileRecords[0].rawVideo)
        self.assertIsNone(fileRecords[0].transcodedVideo)
        self.assertIsNone(fileRecords[0].bif)
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID="show1", episodeID="1", dateRecorded=datetime.utcnow(), duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getFileRecordsWithoutRecordings()))
        # transcoded video
        self.assertEqual(1, db.insertTranscodedFileLocation(1002, 1, "1002.mp4", 0))
        fileRecords = db.getFileRecordsWithoutRecordings()
        self.assertEqual(1, len(fileRecords))
        self.assertEqual(1002, fileRecords[0].recordingID)
        self.assertIsNone(fileRecords[0].rawVideo)
        self.assertEqual('1002.mp4',fileRecords[0].transcodedVideo)
        self.assertIsNone(fileRecords[0].bif)
        self.assertEqual(1, db.insertRecording(recordingID=1002, showID="show1", episodeID="1", dateRecorded=datetime.utcnow(), duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getFileRecordsWithoutRecordings()))
        # bif file
        self.assertEqual(1, db.insertBifFileLocation(1003, 1, "1003.bif"))
        fileRecords = db.getFileRecordsWithoutRecordings()
        self.assertEqual(1, len(fileRecords))
        self.assertEqual(1003, fileRecords[0].recordingID)
        self.assertIsNone(fileRecords[0].rawVideo)
        self.assertIsNone(fileRecords[0].transcodedVideo)
        self.assertEqual('1003.bif', fileRecords[0].bif)
        self.assertEqual(1, db.insertRecording(recordingID=1003, showID="show1", episodeID="1", dateRecorded=datetime.utcnow(), duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getFileRecordsWithoutRecordings()))

    def test_getRawVideoFilesThatCanBeDeleted(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, len(db.getRawVideoFilesThatCanBeDeleted()))
        self.assertEqual(1, db.insertRawFileLocation(recordingID=1001, filename='1001.mpeg2ts'))
        self.assertEqual(0, len(db.getRawVideoFilesThatCanBeDeleted()))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_FAILED))
        self.assertEqual(0, len(db.getRawVideoFilesThatCanBeDeleted()))
        self.assertEqual(1, db.deleteTranscodedVideoRecord(recordingID=1001))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_SUCCESSFUL))
        files = db.getRawVideoFilesThatCanBeDeleted()
        self.assertEqual(1, len(files))
        self.assertEqual(1001, files[0].recordingID)
        self.assertEqual('1001.mpeg2ts', files[0].rawVideo)
        self.assertEqual('1001.mp4', files[0].transcodedVideo)
 
    def test_getTranscodingFailures(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='1_1', title='S1E1', description=''))
        time1 = datetime(2019,11,15,19,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID='show1', episodeID='1_1', dateRecorded=time1,
            duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getTranscodingFailures()))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(0, len(db.getTranscodingFailures()))
        self.assertEqual(1, db.deleteTranscodedVideoRecord(recordingID=1001))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_FAILED))
        result = db.getTranscodingFailures()
        self.assertEqual(1, len(result))
        self.assertEqual(1001, result[0].recordingID)
        self.assertEqual('ShowName1', result[0].show)
        self.assertEqual('S1E1', result[0].episode)
        self.assertEqual(1, result[0].episodeNumber)
        self.assertEqual(time1, result[0].dateRecorded)

    def test_getPendingTranscodingJobs(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='1_1', title='S1E1', description=''))
        time1 = datetime(2019,11,15,19,00,00,00,timezone.utc)
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID='show1', episodeID='1_1', dateRecorded=time1,
            duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(0, len(db.getPendingTranscodingJobs()))
        self.assertEqual(1, db.insertRawFileLocation(recordingID=1001, filename='1001.mpeg2ts'))
        result = db.getPendingTranscodingJobs()
        self.assertEqual(1, len(result))
        self.assertEqual(1001, result[0].recordingID)
        self.assertEqual('ShowName1', result[0].show)
        self.assertEqual('S1E1', result[0].episode)
        self.assertEqual(1, result[0].episodeNumber)
        self.assertEqual(time1, result[0].dateRecorded)
        self.assertEqual(timedelta(minutes=30), result[0].duration)
        # if we add a successful transcode, the recording is no longer returned
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(0, len(db.getPendingTranscodingJobs()))
        # if we delete the transcode, the recording is again returned
        self.assertEqual(1, db.deleteTranscodedVideoRecord(recordingID=1001))
        self.assertEqual(1, len(db.getPendingTranscodingJobs()))
        # if we add a failed transcode, the recording is no longer returned
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_FAILED))
        self.assertEqual(0, len(db.getPendingTranscodingJobs()))

    def test_scheduleTestRecording(self):
        db = SqliteDatabase(":memory:")
        db.insertChannel(channelMajor=41, channelMinor=1, channelActual=14, program=1)
        db.insertSubscription(showID="test", priority=1)
        self.assertEqual(0, len(db.getPendingRecordings()))
        self.assertEqual(1, db.scheduleTestRecording())
        pendingRecordings = db.getPendingRecordings()
        self.assertEqual(1, len(pendingRecordings))
        self.assertEqual(41, pendingRecordings[0].channelMajor)
        self.assertEqual(1, pendingRecordings[0].channelMinor)
        self.assertEqual(timedelta(seconds=120), pendingRecordings[0].duration)
        self.assertEqual("test", pendingRecordings[0].showID)
        self.assertEqual("R", pendingRecordings[0].rerunCode)
        self.assertEqual(1, db.scheduleTestRecording())
        self.assertEqual(2, len(db.getPendingRecordings()))
        self.assertEqual(1, db.scheduleTestRecording())
        self.assertEqual(3, len(db.getPendingRecordings()))

    def test_deleteFailedTranscode_deletesFailed(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(1, db.insertShow(showID='show1', showType='comedy', name='ShowName1'))
        self.assertEqual(1, db.insertEpisode(showID='show1', episodeID='1_1', title='S1E1', description=''))
        self.assertEqual(1, db.insertRecording(recordingID=1001, showID='show1', episodeID='1_1', dateRecorded=datetime.utcnow(),
            duration=timedelta(minutes=30), categoryCode='N'))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_FAILED))
        self.assertEqual(1, len(db.getTranscodingFailures()))
        self.assertEqual(1, db.deleteFailedTranscode(recordingID=1001))
        self.assertEqual(0, len(db.getTranscodingFailures()))

    def test_deleteFailedTranscode_doesNotDeleteSuccessful(self):
        db = SqliteDatabase(":memory:")
        self.assertEqual(0, len(db.getUnreferencedTranscodedVideoRecords()))
        self.assertEqual(1, db.insertTranscodedFileLocation(recordingID=1001, locationID=1, filename='1001.mp4', state=db.TRANSCODE_SUCCESSFUL))
        self.assertEqual(1, len(db.getUnreferencedTranscodedVideoRecords()))
        self.assertEqual(0, db.deleteFailedTranscode(recordingID=1001))
        self.assertEqual(1, len(db.getUnreferencedTranscodedVideoRecords()))
        self.assertEqual(1001, db.getUnreferencedTranscodedVideoRecords()[0].recordingID)

if __name__ == '__main__':
    unittest.main()  

